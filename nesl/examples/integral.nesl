function trapazoidal(func,a,b,n) =
let
    delta = (b-a)/float(n)
in
    delta * sum({func(delta * float(i) + a) : i in index(n)}) $

function adaptive(func,(a,b),n,resolution) =
let
    integral = trapazoidal(func,a,b,n);
    integral2 =  trapazoidal(func,a,b,n*2);
    mid = (a+b)/2.0
in
    if abs(integral2 - integral) > abs(resolution*integral)
    then sum({adaptive(func,interval,n,resolution): 
	      interval in [(a,mid),(mid,b)]})
    else integral2 $

accuracy = 1e-6;
points = 1000;
conv_depth = 8;
max_depth = 11;

function adaptive2(func,depth,a,b) =
let
    integral = trapazoidal(func,a,b,points);
    integral2 =  trapazoidal(func,a,b,points*2);
    mid = (a+b)/2.0
in
    if abs(integral2 - integral) > abs(accuracy*integral) and depth < max_depth
    then 
	if depth < conv_depth then
	    sum({adaptive2(func,depth+1,interval): 
		 interval in [(a,mid),(mid,b)]})
	else
	    adaptive2(func,depth+1,a,mid) +
	    adaptive2(func,depth+1,mid,b)
    else integral2 $

function integrate(func,a,b) = adaptive2(func,0,a,b);
