%;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
THE LIST OF FUNCTIONS CURRENTLY AVAILABLE -- will be adding more

w_make_window((offset,size),name,color,display) -> w_window
  Makes a window with specified offset and size, with title "name"
  and background color.  Color names are: w_black, w_white, w_red, ....

w_kill_window(win) -> bool
  Kills the window.

ADDING FEATURES TO A WINDOW

w_add_box((offset,size),bbox,name,color,win) -> w_window,w_box
  Creates a scaled box on the window for drawing into.  The offset
  is relative to lower left corner.  bbox is the bounding box of 
  the virtual coordinates.

w_add_button((offset,size),name,color,win) -> w_window
  Creates a button on the window

w_add_button_stack((offset,size,sep),names,color,win) -> w_window
  Creates a set of buttons

w_add_text(position,text,color,win) -> w_window
  Add text at the specified position

w_add_text_box((offset,size),name,color,win) -> w_window
  Add a text-box.  This is a box that you can write text into.

w_make_window_box((offset,size),bbox,name,color,display) -> w_window,w_box
  Makes a window with specified offset and size with a box that fills
  it.  This is the same as calling w_make_window and then w_add_box.

GETTING INPUT FROM A WINDOW

w_get_input(win) -> type,name,position,flags,char
  Gets input from the window.
  Type is one of "button","key","box", or "none" depending on the event.
  Name is the name of the box or button clicked on
  Flags specify whether control and shift keys were pressed
  Char is the character entered if the event type is "key"

w_get_button_input -> name
  Gets input from a button on a window.  Any other input will be ignored.

FUNCTIONS ON BOXES

w_get_zoom_box(point,width,box) -> (offset,size)
  Gets a zoom box from the specified box
w_reset_box_size(boxname,bbox,win) -> w_window,w_box
  Resets the virtual coordinates of a box.  Can be used for zooming.
w_bounds_from_box(box) -> (offset,size)
  Returns the bounds for the virtual coordinates
w_clear_box(box) -> bool
w_draw_segments(endpoints,width,color,box) -> bool
w_draw_lines(points,width,color,box) -> bool
w_draw_point(point,color,box) -> bool
w_draw_points(points,color,box) -> bool
w_draw_string(point,string,color,box) -> bool
w_draw_rectangle((offset,size),width,color,box) -> bool
w_shade_rectangle((offset,size),color,box) -> bool
w_shade_polygon(points,color,box) -> bool
  These routines all draw or shade inside of a box 
  The coordinates are virtual coordinates and will be scaled.
w_clip_and_draw_segments(endpoints,width,color,box) -> bool
w_bounding_box(points) -> (offset,size)

FUNCTIONS ON TEXT BOXES

w_write_text_centered(text,color,text_box) -> bool
w_write_text_left(text,color,text_box) -> bool

FUNCTIONS FOR COLOR

w_get_color(r,b,g) -> color
  This returns a color given red, blue, and green values between 0.0 and 1.0
  The color can be used by any of the other routines.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%

%;;;;;;;;
  DATATYPES
;;;;;;;;;%

datatype w_subbox (int,[char],scale_box(float),int) $
datatype w_window (xps_window,[w_subbox],[xps_gc]) $
datatype w_box(xps_window,scale_box(float),[xps_gc],int) $

%;;;;;;;;
  CREATING AND KILLING WINDOWS
;;;;;;;;;%

function w_make_gcs(win,colors,i) =
if #colors == i then [] xps_gc
else [xps_color_gc(xps_func_copy,colors[i],win)]++w_make_gcs(win,colors,i+1) $

function w_make_window((offset,size),name,color,display) =
let
    %i = [0,21845,43690,65535];%
    i = [0,27000,46000,65535];
    w,s,e = xps_nmake_window((offset,size),name,display);
    colors = flatten({flatten({{(x,y,z): x in i}: y in i}): z in i});
    gcs = w_make_gcs(w,colors,0);
    xor_gc = xps_line_gc(xps_func_xor,1,0,w);
    gcs = gcs ++ [xor_gc];
    foo = xps_shade_rectangle(((0,0),size),gcs[color],w);
    mask = xps_event_mask_button_press or xps_event_mask_key_press or
           xps_event_mask_button_release or xps_event_mask_button2_motion;
    foo = xps_select_input(mask,w);
    subs = [] w_subbox;
in w_window(w,subs,gcs) $

function w_kill_window(win) =
let w_window(w,subs,gcs) = win
in xps_kill_window(w) $

%;;;;;;;;
  COLORS
;;;;;;;;;%

function w_get_color(r,b,g) =
    round(3.*r)+round(3.*b)*4+round(3.*g)*16 $

w_black = 0;
w_white = 63;
w_red = 3;
w_blue = 12;
w_green = 48;
w_cyan = 60;
w_yellow = 51;
w_magenta = 15;
w_pink = 43;
w_light_green = 58;
w_light_blue = 44;
w_purple = 9;
w_grey = 42;
w_orange = 35;
w_xor = 64;

%;;;;;;;;
  WINDOW FEATURES
;;;;;;;;;%

function xx_make_scale_box(((x,y),(w,h)),((vx,vy),(vw,vh))) =
let
    scale = min((float(w)/vw),(float(h)/vh));
    offset = (vx - float(x)/scale,vy - float(y)/scale);
in scale_box(((x,y),(w,h)),offset,scale) $

function w_add_box((offset,size),(voffset,vsize),name,color,win) =
let
    box = xx_make_scale_box((offset,size),(voffset,vsize));
    w_window(w,boxes,gcs) = win;
    foo = xps_shade_rectangle((offset,size),gcs[color],w);
    boxes = [w_subbox(0,name,box,color)] ++ boxes;
in w_window(w,boxes,gcs),w_box(w,box,gcs,color) $

function w_add_text_box((offset,size),name,color,win) =
let w,h = size;
in w_add_box((offset,size),((0.,0.),(float(w),float(h))),name,color,win) $

function w_reset_box_size(boxname,(voffset,vsize),win) =
let 
    w_window(w,boxes,gcs) = win;
    foo = {i in [0:#boxes]; w_subbox(x,name,box,c) in boxes 
	   | eql(name,boxname)};
in 
    if #foo == 0 then win,w_box(w,scale_box(((0,0),(0,0)),(0.,0.),0.),gcs,0)
    else let
	i = foo[0];
	w_subbox(type,name,scale_box(b,rest),c) = boxes[i];
	box = xx_make_scale_box(b,(voffset,vsize));
	boxes = rep(boxes,w_subbox(type,name,box,c),i);
    in w_window(w,boxes,gcs),w_box(w,box,gcs,c) $

function w_bounds_from_box(box) =
let w_box(w,scale_box(((x,y),(width,height)),(x0,y0),scale),gcs,c) = box;
in ((x0+float(x)/scale,y0+float(y)/scale),
    (float(width)/scale,float(height)/scale)) $

function w_bounding_box(points) =
let bound_box(x) = bounding_box(points) in x $

function xxx_draw_button((offset,size),name,color,w,gcs) =
let
    (x0,y0),(width,height) = offset,size;
    box = scale_box((offset,(width,height)),(0.,0.),1.);
    foo = xps_shade_rectangle(((x0+4,y0-4),(width,height)),gcs[w_black],w);
    foo = xps_shade_rectangle(((x0,y0),(width,height)),gcs[color],w);
    strpos = x0 + (width-(#name*6))/2, y0 + (height-8)/2;
    foo = xps_draw_string(strpos,name,gcs[color xor 63],w);
in w_subbox(1,name,box,color) $

function w_add_button((offset,size),name,color,win) =
let
    w_window(w,boxes,gcs) = win;
    subbox = xxx_draw_button((offset,size),name,color,w,gcs) ;
    boxes = [subbox] ++ boxes;
in w_window(w,boxes,gcs) $

function w_add_button_stack((offset,size,sep),names,color,win) =
let
    w_window(w,boxes,gcs) = win;
    (x0,y0),(xd,yd) = offset,sep;
    subboxes = {xxx_draw_button(((x0+xd*i,y0+yd*i),size),name,color,w,gcs)
		: i in [0:#names]; name in names};
    boxes = subboxes ++ boxes;
in w_window(w,boxes,gcs) $

function w_add_text(position,text,color,win) =
let 
    w_window(w,boxes,gcs) = win;
    foo = xps_draw_string(position,text,gcs[color],w)
in win $

function w_make_window_box((offset,size),bbox,name,color,display) =
let
    win = w_make_window((offset,size),name,color,display);
    win,box = w_add_box(((0,0),size),bbox,name,color,win);
in win,box $

function w_kill_window_box(box) =
let w_box(w,box,gcs,c) = box
in xps_kill_window(w) $

function w_get_named_box(name,win) = 
let
    w_window(win,boxes,gcs) = win;
    i = find(name,{name: w_subbox(x,name,rest) in boxes});
    i = if i == -1 then 0 else i;
    w_subbox(type,name,scale,color) = boxes[i];
in w_box(win,scale,gcs,color) $

%;;;;;;;;
  DEALING WITH INPUT
;;;;;;;;;%

function xxx_next_selected_event(event_types,w) =
let type,rest = xps_next_event(w);
in 
    if any({type == e: e in event_types}) then type,rest 
    else xxx_next_selected_event(event_types,w) $

function w_handle_button(w,gcs,btype,sbox,state,button) =
if btype == 1 then
    let 
	scale_box(button_shape,rest) = sbox;
	foo = xps_shade_rectangle(button_shape,gcs[w_xor],w);
	foo = xps_next_selected_event(xps_event_button_release,w);
	foo = xps_shade_rectangle(button_shape,gcs[w_xor],w);
    in "button",(state,button),code_char(0)
else "click",(state,button),code_char(0) $

function w_get_input(win) =
let
    w_window(w,subs,gcs) = win;
    events = [xps_event_button_press, xps_event_key_press];
    ktype,(x,y),state,button = xxx_next_selected_event(events,w);
    foo = {w_subbox(type,name,scale_box(((xmin,ymin),(width,height)),i),c) 
              in subs
	   | x >= xmin and x <= xmin+width and y >= ymin and y <= ymin+height}
in
    if #foo > 0 then
	let 
	    w_subbox(btype,name,sbox,c) = foo[0];
	    pt = if btype == 0 then unscale_point((x,y),sbox) else (0.,0.);
	    type,info = (if ktype == xps_event_key_press then
			   "key",(0,0),key_char(button,state,w)
		         else w_handle_button(w,gcs,btype,sbox,state,button))
	in type,name,pt,info
    else "none","",(float(x),float(y)),(0,0),
         if ktype == xps_event_key_press then key_char(button,state,w)
         else code_char(0) $

function w_get_button_input(win) =
let
    type,button_name,pt,(state,button),ch = w_get_input(win);
in 
    if eql(type,"button") then button_name 
    else w_get_button_input(win) $

function w_get_zoom_box(pt,width,box) =
let 
    w_box(w,sbox,gcs,c) = box;
    (x0,y0) = pt;
    (x1,y1) = unscale_point(xps_get_box(scale_point(pt,sbox),
					width,gcs[w_xor],w),sbox)
in ((min(x0,x1),min(y0,y1)),(diff(x0,x1),diff(y0,y1))) $

%;;;;;;;;
  DRAWING AND SHADING
;;;;;;;;;%

function w_clear_box(box) =
let w_box(w,scale_box(rect,r),gcs,c) = box;
in xps_shade_rectangle(rect,gcs[c],w) $

function w_draw_segments(endpoints,width,color,box) =
let
    w_box(w,box,gcs,c) = box;
    scaled_segs = {scale_point(p1,box),scale_point(p2,box):p1,p2 in endpoints};
in xps_draw_segments(scaled_segs,width,gcs[color],w) $

function w_clip_and_draw_segments(endpoints,width,color,box) =
let
    w_box(w,box,gcs,c) = box;
    scaled_segs = pack({scale_and_clip_segment(e,box):e in endpoints});
in xps_draw_segments(scaled_segs,width,gcs[color],w) $

function w_draw_lines(points,width,color,box) =
let w_box(w,box,gcs,c) = box;
in xps_draw_lines({scale_point(p,box):p in points},width,gcs[color],w) $

function scale_check_point(pt,box) =
let
    scale_box(((x0,y0),(w,h)),r) = box;
    (x,y) = scale_point(pt,box);
    fl = (x >= x0 and x <= x0+w and y >= y0 and y <= y0+h)
in (x,y),fl $

function w_draw_point(point,color,box) =
let 
    w_box(w,box,gcs,c) = box;
    pt,fl = scale_check_point(point,box);
in if fl then xps_draw_point(pt,gcs[color],w) else f $

function w_draw_points(points,color,box) =
let 
    w_box(win,box,gcs,c) = box;
    c = gcs[color];
    pts = pack({scale_check_point(p,box): p in points});
in {xps_draw_point(p,c,win): p in pts} $

function w_draw_string(point,string,color,box) =
let w_box(w,box,gcs,c) = box;
in xps_draw_string(scale_point(point,box),string,gcs[color],w) $

function intersect_rectangles(((x0,y0),(w0,h0)),((x,y),(w,h))) =
let
    nx,ny = max(x0,x),max(y0,y);
    nw,nh = max(w-(nx-x),0),max(h-(ny-y),0);
    nw,nh = max(min(nx+nw,x0+w0)-nx,0),max(min(ny+nh,y0+h0)-ny,0);
in
   (nx,ny),(nw,nh), nh > 0 and nw > 0 $

function w_draw_rectangle((offset,size),width,color,box) =
let w_box(w,box,gcs,c) = box;
    scale_box((dim0),offset1,scale) = box;
    dim1 = scale_point(offset,box),scale_size(size,box);
    start,dim,non_empty = intersect_rectangles(dim0,dim1);
in if non_empty then
    xps_draw_rectangle((start,dim),width,gcs[color],w)
   else f $

function w_shade_rectangle((offset,size),color,box) =
let w_box(w,box,gcs,c) = box;
in xps_shade_rectangle((scale_point(offset,box),scale_size(size,box)),
		       gcs[color],w) $

function w_shade_polygon(points,color,box) =
let w_box(w,box,gcs,c) = box;
in xps_shade_polygon({scale_point(p,box):p in points},gcs[color],w) $

function w_clip_and_shade_polygon(points,color,box) =
let 
    w_box(w,box,gcs,c) = box;
    segments = pack({scale_and_clip_segment((p,pn),box)
		:p in points; pn in rotate(points,-1)});
    foo = print_line(@segments);
    pts = flatten({[p1,p2]:p1,p2 in segments});
    foo = print_line(@pts);
in xps_shade_polygon(pts,gcs[color],w) $

%;;;;;;;;
  TEXT BOXES
;;;;;;;;;%

function w_write_text_centered(text,color,text_box) =
let 
    offset,(width,height) = w_bounds_from_box(text_box);
    xoffset = (width - float(#text*6))/2.;
    yoffset = (height - 9.)/2.;
in w_draw_string((xoffset,yoffset),text,color,text_box) $

function w_write_text_left(text,color,text_box) =
let 
    offset,(width,height) = w_bounds_from_box(text_box);
    xoffset = 0.;
    yoffset = (height - 9.)/2.;
in w_draw_string((xoffset,yoffset),text,color,text_box) $

%;;;;;;;;
  A COLOR TEST ROUTINE
;;;;;;;;;%

function w_color_template(foo) =
let
    bbox = ((0.,0.),(8.,8.));
    w,b = w_make_window_box(((0,0),(512,512)),bbox,"color template",
			     w_white,display);
    bar = {{let
	    foo = w_shade_rectangle(((float(i),float(j)),(1.,1.)),i+8*j,b);
	    bar = w_draw_string((float(i)+.4,float(j)+.4),@(i+8*j),
				63 xor (i+8*j),b)
	    in 0
	    :i in [0:8]}
	   :j in [0:8]}
in w,b $
