;;;
;;; Copyright (c) 1992 Carnegie Mellon University 
;;;                    SCAL project: Guy Blelloch, Siddhartha Chatterjee,
;;;                                  Jonathan Hardwick, Jay Sipelstein,
;;;                                  Marco Zagha
;;; All Rights Reserved.
;;;
;;; Permission to use, copy, modify and distribute this software and its
;;; documentation is hereby granted, provided that both the copyright
;;; notice and this permission notice appear in all copies of the
;;; software, derivative works or modified versions, and any portions
;;; thereof, and that both notices appear in supporting documentation.
;;;
;;; CARNEGIE MELLON ALLOWS FREE USE OF tHIS SOFTWARE IN ITS "AS IS"
;;; CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
;;; ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
;;;
;;; The SCAL project requests users of this software to return to 
;;;
;;;  Guy Blelloch				guy.blelloch@cs.cmu.edu
;;;  School of Computer Science
;;;  Carnegie Mellon University
;;;  5000 Forbes Ave.
;;;  Pittsburgh PA 15213-3890
;;;
;;; any improvements or extensions that they make and grant Carnegie Mellon
;;; the rights to redistribute these changes.
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; STUBS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (prim-dist a segdes) ! ((alpha <- alpha segdes) (alpha any)) :stub)

(defop (make-segdes int) ! ((segdes <- int)) :stub)

(defop (prim-iseq init stride segdes) ! ((int <- int int segdes)) :stub)

(defop (old-pack v flags) ! ((v.alpha <- v.alpha v.bool) (alpha any)) :stub)

(defop (pack_scalar v) ! ((v.alpha <- v.(pair alpha bool)) (alpha any)) :stub)

(defop (-> v i) ! ((v.alpha <- v.alpha v.int) (alpha any)) :stub)

(defop (put v i d) ! ((v.alpha <- v.alpha v.int v.alpha) (alpha any)) :stub)

(defop (join v1 p1 v2 p2) ! 
  ((v.alpha <- v.alpha v.int v.alpha v.int) (alpha any))
  :stub)

(defop (prim-count v seg) ! ((int <- bool segdes)) :stub)

(defop (prim-seg-lengths segdes) ! ((int <- segdes)) :stub)

(defop (zip-over a b) ! ((v.(pair alpha beta) <- v.alpha v.beta)
			 (alpha any) (beta any))
  :stub)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; EXIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (prim-exit a) ! ((int <- int))
  (:primitive (EXIT)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; TIMING FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (start_timer a) ! ((int <- int))
  (:primitive (START_TIMER)))

(defop (stop_timer a) ! ((float <- int))
  (:primitive (POP 1 0) (STOP_TIMER)))

;; This is a dummy stub used for type checking and documentation.
;; The compiler special cases calls to time.
(defop (time a) ! (((pair alpha float) <- alpha) (alpha any))
  :stub
  :documentation
  "The expression {\\tt TIME({\\it exp})} returns a pair whose first 
element is the value of the expression {\\it exp} and whose second
element is the time in seconds taken to execute the expression {\\it exp}.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; LOGICAL FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (not a) ! ((alpha <- alpha) (alpha logical))
  (base-typecase alpha
    (int  (:primitive (NOT INT)))
    (bool (:primitive (NOT BOOL))))
  :documentation
  "Returns the logical inverse of the argument.  For integers, this
is the ones complement.")

(defop (or a b) ! ((alpha <- alpha alpha) (alpha logical))
  (base-typecase alpha
    (int  (:primitive (OR INT)))
    (bool (:primitive (OR BOOL))))
  :documentation
  "Returns the inclusive or of the two arguments."
  :infix or)


(defop (and a B) ! ((alpha <- alpha alpha) (alpha logical))
  (base-typecase alpha
    (int  (:primitive (AND INT)))
    (bool (:primitive (AND BOOL))))
  :documentation
  "Returns the logical and of the two arguments."
  :infix and)

(defop (xor a b) ! ((alpha <- alpha alpha) (alpha logical))
  (base-typecase alpha
    (int  (:primitive (XOR INT)))
    (bool (:primitive (XOR BOOL))))
  :documentation
  "Returns the exclusive or of the two arguments."
  :infix xor)

(defop (nor a b) ! ((alpha <- alpha alpha) (alpha logical))
  (not (or a b))
  :documentation
  "Returns the inverse of the inclusive or of the two arguments."
  :infix nor)

(defop (nand a b) ! ((alpha <- alpha alpha) (alpha logical))
  (not (and a b))
  :documentation
  "Returns the inverse of the and of the two arguments."
  :infix nand)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; COMPARISON FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (= a b) ! ((bool <- alpha alpha) (alpha ordinal))
  (base-typecase alpha
    (int   (:primitive (= INT)))
    (float (:primitive (= FLOAT)))
    (char  (:primitive (= INT))))
  :documentation
  "Returns {\\tt t} if the two arguments are equal."
  :infix ==)

(defop (== a b) ! ((bool <- alpha alpha) (alpha ordinal))
  (base-typecase alpha
    (int   (:primitive (= INT)))
    (float (:primitive (= FLOAT)))
    (char  (:primitive (= INT))))
  :documentation
  "Returns {\\tt t} if the two arguments are equal."
  :infix ==)

(defop (/= a b) ! ((bool <- alpha alpha) (alpha ordinal))
  (base-typecase alpha
    (int   (:primitive (!= INT)))
    (float (:primitive (!= FLOAT)))
    (char  (:primitive (!= INT))))
  :documentation
  "Returns {\\tt t} if the two arguments are not equal."
  :infix /=)

(defop (< a b) ! ((bool <- alpha alpha) (alpha ordinal)) 
  (base-typecase alpha
    (int   (:primitive (< INT)))
    (float (:primitive (< FLOAT)))
    (char  (:primitive (< INT))))
  :documentation
  "Returns {\\tt t} if the first argument is strictly less than the 
second argument."
  :infix <)

(defop (> a b) ! ((bool <- alpha alpha) (alpha ordinal))
  (base-typecase alpha
    (int   (:primitive (> INT)))
    (float (:primitive (> FLOAT)))
    (char  (:primitive (> INT))))
  :documentation
  "Returns {\\tt t} if the first argument is strictly 
greater than the second argument."
  :infix >)

(defop (<= a b) ! ((bool <- alpha alpha) (alpha ordinal))
  (base-typecase alpha
    (int   (:primitive (<= INT)))
    (float (:primitive (<= FLOAT)))
    (char  (:primitive (<= INT))))
  :documentation
  "Returns {\\tt t} if the first argument is less than or equal to the 
second argument."
  :infix <=)

(defop (>= a b) ! ((bool <- alpha alpha) (alpha ordinal))
  (base-typecase alpha
    (int   (:primitive (>= INT)))
    (float (:primitive (>= FLOAT)))
    (char  (:primitive (>= INT))))
  :documentation
  "Returns {\\tt t} if the first argument is greater or equal to the second
argument."
  :infix >=)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; PREDICATES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (plusp v) ! ((bool <- alpha) (alpha number))
  (base-typecase alpha
    (int (> v 0))
    (float (> v 0.0)))
  :documentation
  "Returns {\\tt t} if {\\tt v} is strictly greater than 0.")

(defop (minusp v) ! ((bool <- alpha) (alpha number))
  (base-typecase alpha
    (int (< v 0))
    (float (< v 0.0)))
  :documentation
  "Returns {\\tt t} if {\\tt v} is strictly less than 0.")

(defop (zerop v) ! ((bool <- alpha) (alpha number))
  (base-typecase alpha
    (int (= v 0))
    (float (= v 0.0)))
  :documentation
  "Returns {\\tt t} if {\\tt v} is equal to 0.")

(defop (oddp v) ! ((bool <- int))
  (plusp (and 1 v))
  :documentation
  "Returns {\\tt t} if {\\tt v} is odd (not divisible by two).")

(defop (evenp v) ! ((bool <- int))
  (zerop (and 1 v))
  :documentation
  "Returns {\\tt t} if {\\tt v} is even (divisible by two).")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ARITHMETIC FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (+ a b) ! ((alpha <- alpha alpha) (alpha number))
  (base-typecase alpha
    (int (:primitive (+ INT)))
    (float (:primitive (+ FLOAT))))
  :documentation
  "Returns the sum of the two arguments."
  :infix +)

(defop (- a b) ! ((alpha <- alpha alpha) (alpha number))
  (base-typecase alpha
    (int (:primitive (- INT)))
    (float (:primitive (- FLOAT))))
  :documentation
  "Subtracts the second argument from the first."
  :infix -)

(defop (negate v) ! ((alpha <- alpha) (alpha number))
  (base-typecase alpha
    (int (- 0 v))
    (float (- 0.0 v)))
  :documentation
  "Negates a number."
  :infix -)

(defop (select-scalar flag a b) ! ((alpha <- bool alpha alpha) (alpha any))
  (base-typecase alpha
    (bool  (:primitive (SELECT BOOL)))
    (float (:primitive (SELECT FLOAT)))
    (char  (:primitive (SELECT INT)))
    (int   (:primitive (SELECT INT)))))

(defop (abs x) ! ((alpha <- alpha) (alpha number))
  (select-scalar (plusp x) x (negate x))
  :documentation
  "Returns the absolute value of the argument.")

(defop (diff x y) ! ((alpha <- alpha alpha) (alpha number))
  (abs (- x y))
  :documentation
  "Returns the absolute value of the difference of the two arguments.")

(defop (max a b) ! ((alpha <- alpha alpha) (alpha ordinal))
  (select-scalar (> a b) a b)
  :documentation
  "Returns the argument that is greatest (closest to positive infinity).")

(defop (min a b) ! ((alpha <- alpha alpha) (alpha ordinal))
  (select-scalar (< a b) a b)
  :documentation
  "Returns the argument that is least (closest to negative infinity).")

(defop (* v d) ! ((alpha <- alpha alpha) (alpha number))
  (base-typecase alpha
    (int (:primitive (* INT)))
    (float (:primitive (* FLOAT))))
  :documentation
  "Returns the product of the two arguments."
  :infix *)

(defop (div_internal v d) ! ((alpha <- alpha alpha) (alpha number))
  (base-typecase alpha
    (int (:primitive (/ INT)))
    (float (:primitive (/ FLOAT)))))

(defop (/ v d)
  (div_internal v d)
  :documentation
  "Returns {\\tt v} divided by {\\tt d}.
If the arguments are integers, the result is truncated
towards 0."
  :infix /
  :argcheck ((zerop d) "Divide by zero."))

(defop (rem_internal v d) ! ((int <- int int))
  (:primitive (%)))

(defop (rem v d) ! ((int <- int int))
  (rem_internal v d)
  :documentation
  "Returns the remainder after dividing {\\tt v} by {\\tt d}.
The following examples show {\\tt rem} does for negative
arguments: {\\tt rem(5,3) = 2}, {\\tt rem(5,-3) = 2},
{\\tt rem(-5,3) = -2}, and {\\tt rem(-5,-3) = -2}."
  :argcheck ((zerop d) "Divide by zero in function REM."))

(defop (mod v d) ! ((int <- int int))
  (rem_internal (+ v (* d (- 1 (/ v d)))) d)
  :documentation
  "Returns the modulus of the two arguments.  This differs from
rem in how it effects negative numbers: 
{\\tt mod(5,3) = 2}, {\\tt mod(5,-3) = -1},
{\\tt mod(-5,3) = 1}, and {\\tt mod(-5,-3) = -2}."
  :argcheck ((zerop d) "Divide by zero in function MOD."))

(defop (reciprocal v) ! ((float <- float))
  (/ 1.0 v)
  :documentation
  "Returns the reciprocal of {\\tt v}.")

(defop (lshift a b) ! ((int <- int int))
  (:primitive (LSHIFT))
  :documentation
  "Returns the first argument logically shifted to the left by the integer
contained in the second argument.  Shifting will fill with 0-bits.")

(defop (rshift a b) ! ((int <- int int))
  (:primitive (RSHIFT))
  :documentation
  "Returns the first argument logically shifted to the right by the integer
contained in the second argument.  Shifting will fill with 0-bits or the
sign bit, depending on the implementation.")

(defop (prim_sqrt v) ! ((float <- float))
  (:primitive (SQRT)))

(defop (sqrt v)
  (prim_sqrt v)
  :documentation
  "Returns the square root of the argument.  The argument must be nonnegative."
  :argcheck ((minusp v) "Sqrt of negative number."))

(defop (prim_ln v) ! ((float <- float))
  (:primitive (LOG)))

(defop (ln v) ! ((float <- float))
  (prim_ln v)
  :documentation
  "Returns the natural log of the argument."
  :argcheck ((minusp v) "Ln of negative number."))

(defop (log v b) ! ((float <- float float)) 
  (/ (ln v) (ln b))
  :documentation
  "Returns the logarithm of {\\tt v} in the base {\\tt b}.")

(defop (exp v) ! ((float <- float))
  (:primitive (EXP))
  :documentation
  "Returns {\\it e} raised to the power {\\tt v}.")

(defop (expt v p) ! ((float <- float float))
  (exp (* (ln v) p))
  :documentation
  "Returns {\\tt v} raised to the power {\\tt p}.")

(defop (one a) ! ((alpha <- alpha) (alpha number))
  (base-typecase alpha (int 1) (float 1.0)))

(defop (zero a) ! ((alpha <- alpha) (alpha number))
  (base-typecase alpha (int 0) (float 0.0)))

(defop (power-internal a p)
  (if (= p 1) a
     (with ((v (power-internal a (rshift p 1))))
       (if (evenp p) (* v v)
	 (* a (* v v))))))

(defop (^ a p)
  (if (= p 0) (one a) (power-internal a p))
  :documentation "Returns {\\tt v} raised to the integer power {\\tt p}."
  :name power-
  :infix ^
  :argcheck ((minusp p) "The power must be nonnegative for ^ ."))

(defop (power-2 a) (* a a))
(defop (power-3 a) (* a (* a a)))

(defop (gcd a b)
  (if (= b 0)
      a
    (gcd b (rem a b))))

(set pi 3.141592653589793 :documentation "The value of $\pi$.")

(defop (sin v) ! ((float <- float)) 
  (:primitive (SIN))
  :documentation
  "Returns the sine of {\\tt v}, where {\\tt v} is in radians.")

(defop (cos v) ! ((float <- float)) 
  (:primitive (COS))
  :documentation
  "Returns the cosine of {\\tt v}, where {\\tt v} is in radians.")

(defop (tan v) ! ((float <- float)) 
  (:primitive (TAN))
  :documentation
  "Returns the tangent of {\\tt v}, where {\\tt v} is in radians.")

(defop (asin v) ! ((float <- float)) 
  (:primitive (ASIN))
  :documentation
  "Returns the arc sine of {\\tt v}. The result is in radians.")

(defop (acos v) ! ((float <- float)) 
  (:primitive (ACOS))
  :documentation
  "Returns the arc cosine of {\\tt v}. The result is in radians.")

(defop (atan v) ! ((float <- float)) 
  (:primitive (ATAN))
  :documentation
  "Returns the arc tangent of {\\tt v}. The result is in radians.")

(defop (sinh v) ! ((float <- float)) 
  (:primitive (SINH))
  :documentation
  "Returns the hyperbolic sine of {\\tt v} ($(e^x - e^{-x})/2$).")

(defop (cosh v) ! ((float <- float)) 
  (:primitive (COSH))
  :documentation
  "Returns the hyperbolic cosine of {\\tt v} ($(e^x + e^{-x})/2$).")

(defop (tanh v) ! ((float <- float)) 
  (:primitive (TANH))
  :documentation
  "Returns the hyperbolic tangent of {\\tt v} 
($(e^x - e^{-x})/(e^x + e^{-x})$).")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CONVERSION FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defop (btoi a) ! ((int <- bool))
  (:primitive (B_TO_I))
  :documentation
  "Converts the boolean values {\\tt t} and {\\tt f} into 1 and 0, 
respectively.")

(defop (code_char a) ! ((char <- int))
  (:primitive)
  :documentation
  "Converts an integer to a character.  The integer must be the
code for a valid character.")

(defop (char_code a) ! ((int <- char))
  (:primitive)
  :documentation
  "Converts a character to its integer code.")

(defop (float v) ! ((float <- int))
  (:primitive (I_TO_F))
  :documentation
  "Converts an integer to a floating-point number.")

(defop (ceil v) ! ((int <- float))
  (:primitive (CEIL))
  :documentation
  "Converts a floating-point number to an integer by truncating toward 
 positive infinity.")

(defop (floor v) ! ((int <- float))
  (:primitive (FLOOR))
  :documentation
  "Converts a floating-point number to an integer by truncating toward 
negative infinity.")

(defop (trunc v) ! ((int <- float))
  (:primitive (TRUNC))
  :documentation
  "Converts a floating-point number to an integer by truncating toward zero.")

(defop (round v) ! ((int <- float))
  (:primitive (ROUND))
  :documentation
  "Converts a floating-point number to an integer by rounding to the 
nearest integer; if the number is exactly halfway between two integers, 
then it is implementation specific to which integer it is rounded.")

(defop (isqrt v) ! ((int <- int))
  (floor (sqrt (float v)))
  :documentation
  "Returns the greatest integer less than or equal to the exact 
square root of the integer argument.  The argument must be nonnegative.")

(defop (rand-internal v) ! ((alpha <- alpha) (alpha number))
  (base-typecase alpha
    (int (:primitive (RAND)))
    (float (with ((range  (lshift 1 30)))
	     (* v (/ (float (rand-internal range)) (float range)))))))

(defop (rand v)
  (rand-internal v)
  :documentation
  "For a positive value {\\tt v}, {\\tt rand} returns a random value 
in the range [0..{\\tt v}).  Note that the random number seed is reset each
time the user returns to top level.  To get different sets of random numbers,
use {\\tt rand_seed} with different seeds."
  :argcheck ((not (plusp v)) "Rand only works with positive numbers."))

(defop (rand_seed v) ! ((bool <- int))
  (:primitive (SRAND INT))
  :documentation
  "Seed the random number generator.  Note that a given seed is only guaranteed
to give the same sequence of random numbers on a fixed machine and with
a fixed number of processors."
  :serial t)

;;;;;;;;

(defop (float_num a) ! ((float <- alpha) (alpha number))
  (base-typecase alpha
    (int (:primitive (I_TO_F)))
    (float (:primitive))))

(defop (int_to_any a b) ! ((alpha <- int alpha) (alpha number))
  (base-typecase alpha
    (int a)
    (float (float a))))

(defop (float_to_any a b) ! ((alpha <- float alpha) (alpha number))
  (base-typecase alpha
    (int (round a))
    (float a)))
