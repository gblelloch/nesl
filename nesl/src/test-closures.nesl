function perm(vals) = 
if #vals == 1 then [vals]
else 
    let func= (i => {[vals[i]] ++ p: p in perm(take(vals,i)++drop(vals,i+1))});
    in flatten(map(func,[0:#vals])) $

function apply(x,y) = x(y) $

function foo(x) =
if (x == 1) then 1
else let
    bar = (y => y*foo(y-1));
in apply(bar,x) $

function testclosures (a) =
  eql(foo(4),24) and eql(perm([1,3]),[[1,3],[3,1]]) $
