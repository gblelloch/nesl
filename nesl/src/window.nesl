%;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
THE LIST OF FUNCTIONS CURRENTLY AVAILABLE -- will be adding more

w_make_window((offset,size),name,color,display) -> w_window
  Makes a window with specified offset and size, with title "name"
  and background color.  Color names are: w_black, w_white, w_red, ....

w_kill_window(win) -> bool
  Kills the window.

ADDING FEATURES TO A WINDOW

w_add_box((offset,size),bbox,name,color,win) -> w_window,w_box
  Creates a scaled box on the window for drawing into.  The offset
  is relative to lower left corner.  bbox is the bounding box of 
  the virtual coordinates.

w_add_button((offset,size),name,color,win) -> w_window
  Creates a button on the window

w_add_button_stack((offset,size,sep),names,color,win) -> w_window
  Creates a set of buttons

w_add_text(position,text,color,win) -> w_window
  Add text at the specified position

w_add_text_box((offset,size),name,color,win) -> w_window
  Add a text-box.  This is a box that you can write text into.

w_make_window_box((offset,size),bbox,name,color,display) -> w_window,w_box
  Makes a window with specified offset and size with a box that fills
  it.  This is the same as calling w_make_window and then w_add_box.

w_get_named_box(name,win) -> w_box
  Gets the box in the window with the given name.

GETTING INPUT FROM A WINDOW

w_get_input(win) -> type,name,position,flags,char
  Gets input from the window.
  Type is one of "button","key","box", or "none" depending on the event.
  Name is the name of the box or button clicked on
  Flags specify whether control and shift keys were pressed
  Char is the character entered if the event type is "key"

w_get_button_input -> name
  Gets input from a button on a window.  Any other input will be ignored.

FUNCTIONS ON BOXES

w_get_zoom_box(point,width,box) -> (offset,size)
  Gets a zoom box from the specified box
w_reset_box_size(boxname,bbox,win) -> w_window,w_box
  Resets the virtual coordinates of a box.  Can be used for zooming.
w_bounds_from_box(box) -> (offset,size)
  Returns the bounds for the virtual coordinates
w_clear_box(box) -> bool
w_draw_segments(endpoints,width,color,box) -> bool
w_draw_lines(points,width,color,box) -> bool
w_draw_point(point,color,box) -> bool
w_draw_points(points,color,box) -> bool
w_draw_string(point,string,color,box) -> bool
w_draw_rectangle((offset,size),width,color,box) -> bool
w_shade_rectangle((offset,size),color,box) -> bool
w_shade_polygon(points,color,box) -> bool
  These routines all draw or shade inside of a box 
  The coordinates are virtual coordinates and will be scaled.
w_clip_and_draw_segments(endpoints,width,color,box) -> bool
w_bounding_box(points) -> (offset,size)

FUNCTIONS ON TEXT BOXES

w_write_text_centered(text,color,text_box) -> bool
w_write_text_left(text,color,text_box) -> bool

FUNCTIONS FOR COLOR

w_get_color(r,b,g) -> color
  This returns a color given red, blue, and green values between 0.0 and 1.0
  The color can be used by any of the other routines.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;%

%;;;;;;;;
  DATATYPES
;;;;;;;;;%

datatype w_subbox (int,[char],scale_box(float),int) $
datatype w_window (xps_window,[w_subbox],[xps_gc]) $
datatype w_box(xps_window,scale_box(float),[xps_gc],int) $

%;;;;;;;;
  CREATING AND KILLING WINDOWS
;;;;;;;;;%

function w_make_gcs(win,colors,i) =
if #colors == i then [] xps_gc
else [xps_color_gc(xps_func_copy,colors[i],win)]++w_make_gcs(win,colors,i+1) $

function w_make_default_colormap(win) =
let
    i = [0,27000,46000,65535];
    colors = flatten({flatten({{(x,y,z): x in i}: y in i}): z in i});
    gcs = w_make_gcs(win,colors,0);
    xor_gc = xps_line_gc(xps_func_xor,1,0,win);
    gcs = gcs ++ [xor_gc];
in gcs $

function w_make_gray_colormap(win) =
let
    colors = {i,i,i: i in [0:65536:1024]};
    gcs = w_make_gcs(win,colors,0);
in gcs $

function w_make_window((offset,size),title,background_color,display) 
"Makes an X window on the specified display with the given offset,
size, title, and background color.  

Note that windows get automatically closed when you return to
top-level.  This means that you cannot return a window to top-level
and then use it---you must create it and use it within a single
top-level call."
=
let
    w,s,e = xps_nmake_window((offset,size),title,display,stderr);
    gcs = if background_color == -1 then w_make_gray_colormap(w)
          else w_make_default_colormap(w);
    foo = if background_color == -1 then t 
          else xps_shade_rectangle(((0,0),size),gcs[background_color],w);
    mask = xps_event_mask_button_press or xps_event_mask_key_press or
           xps_event_mask_button_release or xps_event_mask_button2_motion;
    foo = xps_select_input(mask,w);
    subs = [] w_subbox;
in w_window(w,subs,gcs) $

function w_kill_window(win) 
"Kills a window created by {\\tt w_make_window}."
=
let w_window(w,subs,gcs) = win
in xps_kill_window(w) $

%;;;;;;;;
  COLORS
;;;;;;;;;%

function w_get_color(r,b,g) =
    round(3.*r)+round(3.*b)*4+round(3.*g)*16 $

w_black = 0;
w_white = 63;
w_red = 3;
w_blue = 12;
w_green = 48;
w_cyan = 60;
w_yellow = 51;
w_magenta = 15;
w_pink = 43;
w_light_green = 58;
w_light_blue = 44;
w_purple = 9;
w_gray = 42;
w_dark_gray = 21;

w_orange = 35;
w_xor = 64;

%w_black = w_get_color(0.,0.,0.);
w_white = w_get_color(1.,1.,1.);
w_red = w_get_color(1.,0.,0.);
w_blue = w_get_color(0.,1.,0.);
w_green = w_get_color(0.,0.,1.);
w_cyan = w_get_color(0.,1.,1.);
w_magenta = w_get_color(1.,1.,0.);
w_yellow = w_get_color(1.,0.,1.);
w_light_green = w_get_color(.7,.7,1.);
w_pink = w_get_color(1.,.7,.7);
w_light_blue = w_get_color(0.,1.,.7);
w_gray = w_get_color(.7,.7,.7);
w_dark_gray = w_get_color(.3,.3,.3);
w_purple = w_get_color(.3,.7,0.);
w_orange = w_get_color(1.,0.,.7);
%

%;;;;;;;;
  WINDOW FEATURES
;;;;;;;;;%

function xx_make_scale_box(((x,y),(w,h)),((vx,vy),(vw,vh))) =
let
    scale = min((float(w)/vw),(float(h)/vh));
    offset = (vx - float(x)/scale,vy - float(y)/scale);
in scale_box(((x,y),(w,h)),offset,scale) $

function w_add_box((offset,size),(voffset,vsize),name,color,window) 
"Creates a scaled box on the specified window, which can be used to
draw into using the various drawing commands.  The position and size
of the box within the window are specifed by offset and size.  The
virtual coordinates of the box are specified by the virtual offset
({\\tt voffset}) and the virtual size ({\\tt vsize}).  The color specifies 
the background color.  The function returns a pair whose first element
in the modified window structure and whose second element is the newly
created box.  Technically this box is not necessary since it can be
retrieved with {\\tt w_get_named_box}."
=
let
    box = xx_make_scale_box((offset,size),(voffset,vsize));
    w_window(w,boxes,gcs) = window;
    foo = xps_shade_rectangle((offset,size),gcs[color],w);
    boxes = [w_subbox(0,name,box,color)] ++ boxes;
in w_window(w,boxes,gcs),w_box(w,box,gcs,color) $

function w_add_text_box((offset,size),name,color,window) 
"Create a text box on the specified window with the given offset, size
and color.  Such a box can be used in conjunction {\\tt w_write_paragraph},
{\\tt w_write_text_centered} or {\\tt w_write_text_left}.  These will 
all write text into a text box."
=
let w,h = size;
in w_add_box((offset,size),((0.,0.),(float(w),float(h))),name,color,window) $

function w_reset_box_size(boxname,(voffset,vsize),window)
"Resets the virtual coordinates of a scaled box inside of a window.
You need to pass this command the name of the box rather than the box itself.
Like {\\tt w_make_box}, it returns both the new window structure and a new box.
This command does not clear the current contents of the box."
=
let 
    w_window(w,boxes,gcs) = window;
    foo = {i in [0:#boxes]; w_subbox(x,name,box,c) in boxes 
	   | eql(name,boxname)};
in 
    if #foo == 0 then window,w_box(w,scale_box(((0,0),(0,0)),(0.,0.),0.),gcs,0)
    else let
	i = foo[0];
	w_subbox(type,name,scale_box(b,rest),c) = boxes[i];
	box = xx_make_scale_box(b,(voffset,vsize));
	boxes = rep(boxes,w_subbox(type,name,box,c),i);
    in w_window(w,boxes,gcs),w_box(w,box,gcs,c) $

function w_bounds_from_box(box)
"Returns the virtual coordinates of a scale box."
=
let w_box(w,scale_box(((x,y),(width,height)),(x0,y0),scale),gcs,c) = box;
in ((x0+float(x)/scale,y0+float(y)/scale),
    (float(width)/scale,float(height)/scale)) $

function w_box_scale(box)
"Returns the ratio of the size of a box in pixels to the size in
the virtual coordinate system."
=
let w_box(w,scale_box(((x,y),(width,height)),(x0,y0),scale),gcs,c) = box;
in scale $

function w_bounding_box(points)
"For a set of points this function returns a bounding box (the smallest box
that contains them all).  The bounding box is specified as a pair in
which the first element is the (x,y) coordinate of the lower left corner 
and the second element is a pair with the width and height."
=
let bound_box(x) = bounding_box(points) in x $

function xxx_draw_button((offset,size),name,color,w,gcs) =
let
    (x0,y0),(width,height) = offset,size;
    box = scale_box((offset,(width,height)),(0.,0.),1.);
    foo = xps_shade_rectangle(((x0+4,y0-4),(width,height)),gcs[w_black],w);
    foo = xps_shade_rectangle(((x0,y0),(width,height)),gcs[color],w);
    strpos = x0 + (width-(#name*6))/2, y0 + (height-8)/2;
    foo = xps_draw_string(strpos,name,gcs[color xor 63],w);
in w_subbox(1,name,box,color) $

function w_add_button((offset,size),name,color,window)
"Adds a button to a window.  The name is printed across the button
and is also the name that is returned by {\\tt w_get_input} and 
related functions if the button is pressed."
=
let
    w_window(w,boxes,gcs) = window;
    subbox = xxx_draw_button((offset,size),name,color,w,gcs) ;
    boxes = [subbox] ++ boxes;
in w_window(w,boxes,gcs) $

function w_add_button_stack((offset,size,separation),names,color,window) 
"Adds a stack of buttons.  The separation is specified as an x and y
distance (e.g. if the x distance is 0, then the buttons will vertical).
{\\tt names} is an array of button names."
=
let
    w_window(w,boxes,gcs) = window;
    (x0,y0),(xd,yd) = offset,separation;
    subboxes = {xxx_draw_button(((x0+xd*i,y0+yd*i),size),name,color,w,gcs)
		: i in [0:#names]; name in names};
    boxes = subboxes ++ boxes;
in w_window(w,boxes,gcs) $

function w_add_text(position,text,color,window)
"Adds a single text string to a window at the specified position.  The 
function {\\tt w_add_text_box} is often more convenient."
=
let 
    w_window(w,boxes,gcs) = window;
    foo = xps_draw_string(position,text,gcs[color],w)
in window $

function w_add_image((point,size),vals,window) =
let 
    w_window(w,boxes,gcs) = window;
    vals = {v/4 : v in vals};
    foo = if any({v >= 64: v in vals}) then 
             print_line("Pixel value too large for w_add_image")
          else t;
    foo = xps_draw_image((point,size),vals,w);
in window $

function w_make_window_box((offset,size),bbox,name,color,display) =
let
    win = w_make_window((offset,size),name,color,display);
    win,box = w_add_box(((0,0),size),bbox,name,color,win);
in win,box $

function w_kill_window_box(box) =
let w_box(w,box,gcs,c) = box
in xps_kill_window(w) $

function w_get_named_box(name,window)
"Returns the box of the specified name from a window."
 = 
let
    w_window(win,boxes,gcs) = window;
    i = find(name,{name: w_subbox(x,name,rest) in boxes});
    i = if i == -1 then 0 else i;
    w_subbox(type,name,scale,color) = boxes[i];
in w_box(win,scale,gcs,color) $

%;;;;;;;;
  DEALING WITH INPUT
;;;;;;;;;%

function xxx_next_selected_event(event_types,w) =
let type,rest = xps_next_event(w);
in 
    if any({type == e: e in event_types}) then type,rest 
    else xxx_next_selected_event(event_types,w) $

function xxx_next_selected_event_noblock(event_types,w) =
let flag,type,rest = xps_next_event_noblock(w);
in 
    if not(flag) then flag,type,rest
    else if any({type == e: e in event_types}) then flag,type,rest 
    else xxx_next_selected_event_noblock(event_types,w) $

function w_handle_button(w,gcs,btype,sbox,state,button) =
if btype == 1 then
    let 
	scale_box(button_shape,rest) = sbox;
	foo = xps_shade_rectangle(button_shape,gcs[w_xor],w);
	foo = xps_next_selected_event(xps_event_button_release,w);
	foo = xps_shade_rectangle(button_shape,gcs[w_xor],w);
    in "button",(state,button),code_char(0)
else "click",(state,button),code_char(0) $

function w_parse_input((ktype,(x,y),state,button),win) =
let
    w_window(w,subs,gcs) = win;
    foo = {w_subbox(type,name,scale_box(((xmin,ymin),(width,height)),i),c) 
              in subs
	   | x >= xmin and x <= xmin+width and y >= ymin and y <= ymin+height}
in
    if #foo > 0 then
	let 
	    w_subbox(btype,name,sbox,c) = foo[0];
	    pt = if btype == 0 then unscale_point((x,y),sbox) else (0.,0.);
	    type,info = (if ktype == xps_event_key_press then
			   "key",(0,0),key_char(button,state,w)
		         else w_handle_button(w,gcs,btype,sbox,state,button))
	in type,name,pt,info
    else "none","",(float(x),float(y)),(0,0),
         if ktype == xps_event_key_press then key_char(button,state,w)
         else code_char(0) $

function w_get_input(window) 
"Gets input from a window.  It returns a tuple of the form
(event_type,name,position,flags,char).  The event_type
is one of \"button\",\"key\",\"box\", or \"none\" depending on the event.
The \"box\" event in evoked if you click the mouse inside of a box.
The name is the name of the box or button on which the event took place.
The position specifies the the virtual coordinate on which a \"box\"
event took place.
The flags specify whether control and shift keys were pressed.
The character specifies the key pressed in the case of a \"key\" event.
This function blocks until an event takes place."
=
let
    w_window(w,subs,gcs) = window;
    events = [xps_event_button_press, xps_event_key_press];
    event_info = xxx_next_selected_event(events,w);
in w_parse_input(event_info,window) $

function w_get_input_noblock(window) 
"This is the same as {\\tt w_get_input} but does not block.  It returns 
an additional flag at the begining, which specifies if
an event was found."
=
let
    w_window(w,subs,gcs) = window;
    events = [xps_event_button_press, xps_event_key_press];
    flag,event_info = xxx_next_selected_event_noblock(events,w);
in if flag then flag,w_parse_input(event_info,window)
   else flag,("none","",(0.,0.),(0,0),`a) $

function w_get_button_input(window) 
"This function only picks up button events and throws away all other
events.  It returns the button name."
=
let
    type,button_name,pt,(state,button),ch = w_get_input(window);
in 
    if eql(type,"button") then button_name 
    else w_get_button_input(window) $

function w_get_zoom_box(pt,width,box) 
"This function allows to to use an elastic band to pick out a region
of a box.  It is typically used in conjunction with {\\tt w_get_input}.  In
particular, if the input returned by {\\tt w_get_input} is a mouse click on a
particular box (down click) the position of the click and the box can
be passed to this function which will then return the other corner
(the corner on which the user lets go of the mouse).  This function
actually returns the lower left and upper right corners of the region.
The width specifies the width in pixels of the elastic band."
=
let 
    w_box(w,sbox,gcs,c) = box;
    (x0,y0) = pt;
    (x1,y1) = unscale_point(xps_get_box(scale_point(pt,sbox),
					width,gcs[w_xor],w),sbox)
in ((min(x0,x1),min(y0,y1)),(diff(x0,x1),diff(y0,y1))) $

%;;;;;;;;
  DRAWING AND SHADING
;;;;;;;;;%

function w_clear_box(box) 
"Clears the contents of a box."
=
let w_box(w,scale_box(rect,r),gcs,c) = box;
in xps_shade_rectangle(rect,gcs[c],w) $

function w_draw_segments_noclip(endpoints,width,color,box) 
"Draws a sequence of line segments into a box based on virtual coordinates.
Each line-segment is specified as a pair of points.
The {\\tt width} argument specifies the width of the lines in pixels."
=
let
    w_box(w,box,gcs,c) = box;
    scaled_segs = {scale_point(p1,box),scale_point(p2,box):p1,p2 in endpoints};
in xps_draw_segments(scaled_segs,width,gcs[color],w) $

function scale_check_point(pt,box) =
let
    scale_box(((x0,y0),(w,h)),r) = box;
    (x,y) = scale_point(pt,box);
    fl = (x >= x0 and x <= x0+w and y >= y0 and y <= y0+h)
in (x,y),fl $

function check_point(pt,box) 
"Checks if a point is within the virtual coordinates of a scale box."
= rest(scale_check_point(pt,box)) $

function w_draw_segments(endpoints,width,color,box) 
"Draws a sequence of line segments in a box based on virtual coordinates.
Each line-segment is specified as a pair of points.
The {\\tt width} argument specifies the width of the lines in pixels.
All segments that go ouside of the box are clipped."
=
let
    w_box(w,box,gcs,c) = box;
    scaled_segs = pack({scale_and_clip_segment(e,box):e in endpoints});
in xps_draw_segments(scaled_segs,width,gcs[color],w) $

function w_clip_and_draw_segments(endpoints,width,color,box) =
  w_draw_segments(endpoints,width,color,box) $

function w_draw_lines(points,width,color,box)
"Draws a sequence of lines between the points in the {\\tt points}
argument in a box based on the virtual coordinates.  A line is drawn
from each element in {\\tt points} to the next element in {\\tt points}.
For a sequence of length L, a total of L-1 lines will be drawn (no
line is drawn from the last point).
The {\\tt width} argument specifies the width of the lines in pixels."
=
let w_box(w,box,gcs,c) = box;
in xps_draw_lines({scale_point(p,box):p in points},width,gcs[color],w) $

function w_draw_point(point,color,box)
"Draws a point in a box based on the virtual coordinates."  
=
let 
    w_box(w,box,gcs,c) = box;
    pt,fl = scale_check_point(point,box);
in if fl then xps_draw_point(pt,gcs[color],w) else f $

function w_draw_points(points,color,box)
"Draws a sequence of points in a box based on the virtual coordinates."  
=
let 
    w_box(win,box,gcs,c) = box;
    c = gcs[color];
    pts = pack({scale_check_point(p,box): p in points});
in {xps_draw_point(p,c,win): p in pts} $

function w_draw_big_point(point,size,color,box)
"Draws a big point in a box based on the virtual coordinates.
The point size is specified by an integer (pixels)."  
=
let 
    w_box(win,box,gcs,c) = box;
    c = gcs[color];
    s2 = size/2;
    (x,y),fl = scale_check_point(point,box);
in 
    if fl 
    then xps_draw_rectangle(((x-s2,y-s2),(size,size)),2,c,win)
    else f $

function w_draw_big_points(points,size,color,box) =
let 
    w_box(win,box,gcs,c) = box;
    c = gcs[color];
    s2 = size/2;
    pts = pack({scale_check_point(p,box): p in points});
in {xps_draw_rectangle(((x-s2,y-s2),(size,size)),2,c,win): x,y in pts} $

function w_draw_string(point,string,color,box) 
"Draws a text string in a box at the position specified by {\\tt point}
in virtual coordinates."
=
let w_box(w,box,gcs,c) = box;
in xps_draw_string(scale_point(point,box),string,gcs[color],w) $

function intersect_rectangles(((x0,y0),(w0,h0)),((x,y),(w,h))) =
let
    nx,ny = max(x0,x),max(y0,y);
    nw,nh = max(w-(nx-x),0),max(h-(ny-y),0);
    nw,nh = max(min(nx+nw,x0+w0)-nx,0),max(min(ny+nh,y0+h0)-ny,0);
in
   (nx,ny),(nw,nh), nh > 0 and nw > 0 $

function w_draw_rectangle((offset,size),width,color,box) 
"Draws a rectangle in a box based on the virtual coordinates.
This function clips any part of the rectangle that goes outside the box.
The {\\tt width} specified the width of the lines."
=
let w_box(w,box,gcs,c) = box;
    scale_box((dim0),offset1,scale) = box;
    dim1 = scale_point(offset,box),scale_size(size,box);
    start,dim,non_empty = intersect_rectangles(dim0,dim1);
in if non_empty then
    xps_draw_rectangle((start,dim),width,gcs[color],w)
   else f $

function w_shade_rectangle((offset,size),color,box)
"Shades a rectangle in a box based on the virtual coordinates.
This function clips any part of the rectangle that goes outside the box."
=
let w_box(w,box,gcs,c) = box;
    scale_box((dim0),offset1,scale) = box;
    dim1 = scale_point(offset,box),scale_size(size,box);
    start,dim,non_empty = intersect_rectangles(dim0,dim1);
in if non_empty then
    xps_shade_rectangle((start,dim),gcs[color],w)
   else f $

function w_shade_polygon_noclip(points,color,box)
"Shades a polygon in a box based on the virtual coordinates.
The polygon is specified as a sequence of points.
This function does not do any clipping."
=
let w_box(w,box,gcs,c) = box;
in xps_shade_polygon({scale_point(p,box):p in points},gcs[color],w) $

function w_shade_polygon(points,color,box)
"Shades a polygon in a box based on the virtual coordinates.
The polygon is specified as a sequence of points.
This function clips any part of the polygon that goes outside of the box."
=
let 
    w_box(w,box,gcs,c) = box;
    segments = pack({scale_and_clip_segment((p,pn),box)
		:p in points; pn in rotate(points,-1)});
    pts = flatten({[p1,p2]:p1,p2 in segments});
in xps_shade_polygon(pts,gcs[color],w) $

function w_clip_and_shade_polygon(points,color,box)
 = w_shade_polygon(points,color,box) $

function w_draw_arrow(endpoints,width,(head_length,head_width),
		      color,box) =
let
    w_box(w,boxx,gcs,c) = box;
    seg,fl = scale_and_clip_segment(endpoints,boxx);
in 
    if not(fl) then f
    else let
	x = xps_draw_segments([seg],width,gcs[color],w);
	(x0,y0),(x1,y1) = endpoints;
	scale = w_box_scale(box);
	xs = (float(head_length)/sqrt((x1-x0)^2 + (y1-y0)^2))/scale;
	xd,yd = (x1-x0)*xs,(y1-y0)*xs;
	ratio = (float(head_width)/float(head_length))/2.;
	pt1 = (x1+xd,y1+yd);
	pt2 = (x1-ratio*yd,y1+ratio*xd);
	pt3 = (x1+ratio*yd,y1-ratio*xd);
    in 
	if check_point(pt1,boxx) and check_point(pt2,boxx) 
	    and check_point(pt3,boxx)
	then w_shade_polygon([pt1,pt2,pt3],color,box)
	else f $

%;;;;;;;;
  TEXT BOXES
;;;;;;;;;%

function w_write_text_centered(text,color,text_box) 
"Writes text into a text box such that the text is centered
both horizontally and vertically."
=
let 
    foo = w_clear_box(text_box);
    offset,(width,height) = w_bounds_from_box(text_box);
    xoffset = (width - float(#text*6))/2.;
    yoffset = (height - 9.)/2.;
in w_draw_string((xoffset,yoffset),text,color,text_box) $

function w_write_text_left(text,color,text_box)
"Writes text into a text box such that it is against the left end of
the box and centered vertically."
=
let 
    foo = w_clear_box(text_box);
    offset,(width,height) = w_bounds_from_box(text_box);
    xoffset = 0.;
    yoffset = (height - 9.)/2.;
in w_draw_string((xoffset,yoffset),text,color,text_box) $

function w_write_paragraph(text,color,text_box)
"Writes a paragraph into a text box starting at the top left hand corner
of the box and does line wrapping so the text will not go outside of the
right margin of the box.  Line breaks are ignored although the @ character
can be used to force a line break."
=
let 
    foo = w_clear_box(text_box);
    w_box(w,box,gcs,c) = text_box;
    scale_box(((x0,y0),(width,height)),r) = box;
    char_width,char_height = 6,12;
    line_spacing = char_height + 5;
    line_length = (width/char_width)-2;
    xo,yo = x0+char_width,(y0+height-line_spacing);
    paragraphs = group_by_space(text,"@");
    lines = flatten({justify_text(par,line_length): par in paragraphs});
    gc = gcs[color];
    foo = {xps_draw_string((xo,yo-line_spacing*i),line,gc,w)
		   : line in lines; i in [0:#lines]};
in  t $

%;;;;;;;;
  A COLOR TEST ROUTINE
;;;;;;;;;%

%
function w_color_template(foo) =
let
    bbox = ((0.,0.),(8.,8.));
    w,b = w_make_window_box(((0,0),(512,512)),bbox,"color template",
			     w_white,display);
    bar = {{let
	    foo = w_shade_rectangle(((float(i),float(j)),(1.,1.)),i+8*j,b);
	    bar = w_draw_string((float(i)+.4,float(j)+.4),@(i+8*j),
				63 xor (i+8*j),b)
	    in 0
	    :i in [0:8]}
	   :j in [0:8]}
in w,b $
%
